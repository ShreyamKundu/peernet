// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: proto/peernet.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message containing chunk details.
type ChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHash      string                 `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	ChunkIndex    int32                  `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkRequest) Reset() {
	*x = ChunkRequest{}
	mi := &file_proto_peernet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkRequest) ProtoMessage() {}

func (x *ChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_peernet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkRequest.ProtoReflect.Descriptor instead.
func (*ChunkRequest) Descriptor() ([]byte, []int) {
	return file_proto_peernet_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkRequest) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ChunkRequest) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

// The response message containing the chunk data.
type ChunkResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The raw (and encrypted) bytes of the file chunk.
	ChunkData     []byte `protobuf:"bytes,1,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkResponse) Reset() {
	*x = ChunkResponse{}
	mi := &file_proto_peernet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkResponse) ProtoMessage() {}

func (x *ChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_peernet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkResponse.ProtoReflect.Descriptor instead.
func (*ChunkResponse) Descriptor() ([]byte, []int) {
	return file_proto_peernet_proto_rawDescGZIP(), []int{1}
}

func (x *ChunkResponse) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

var File_proto_peernet_proto protoreflect.FileDescriptor

const file_proto_peernet_proto_rawDesc = "" +
	"\n" +
	"\x13proto/peernet.proto\x12\x05proto\"L\n" +
	"\fChunkRequest\x12\x1b\n" +
	"\tfile_hash\x18\x01 \x01(\tR\bfileHash\x12\x1f\n" +
	"\vchunk_index\x18\x02 \x01(\x05R\n" +
	"chunkIndex\".\n" +
	"\rChunkResponse\x12\x1d\n" +
	"\n" +
	"chunk_data\x18\x01 \x01(\fR\tchunkData2I\n" +
	"\vPeerService\x12:\n" +
	"\rDownloadChunk\x12\x13.proto.ChunkRequest\x1a\x14.proto.ChunkResponseB'Z%github.com/ShreyamKundu/peernet/protob\x06proto3"

var (
	file_proto_peernet_proto_rawDescOnce sync.Once
	file_proto_peernet_proto_rawDescData []byte
)

func file_proto_peernet_proto_rawDescGZIP() []byte {
	file_proto_peernet_proto_rawDescOnce.Do(func() {
		file_proto_peernet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_peernet_proto_rawDesc), len(file_proto_peernet_proto_rawDesc)))
	})
	return file_proto_peernet_proto_rawDescData
}

var file_proto_peernet_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_peernet_proto_goTypes = []any{
	(*ChunkRequest)(nil),  // 0: proto.ChunkRequest
	(*ChunkResponse)(nil), // 1: proto.ChunkResponse
}
var file_proto_peernet_proto_depIdxs = []int32{
	0, // 0: proto.PeerService.DownloadChunk:input_type -> proto.ChunkRequest
	1, // 1: proto.PeerService.DownloadChunk:output_type -> proto.ChunkResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_peernet_proto_init() }
func file_proto_peernet_proto_init() {
	if File_proto_peernet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_peernet_proto_rawDesc), len(file_proto_peernet_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_peernet_proto_goTypes,
		DependencyIndexes: file_proto_peernet_proto_depIdxs,
		MessageInfos:      file_proto_peernet_proto_msgTypes,
	}.Build()
	File_proto_peernet_proto = out.File
	file_proto_peernet_proto_goTypes = nil
	file_proto_peernet_proto_depIdxs = nil
}
